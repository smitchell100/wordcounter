package com.synalogik.wordcountcore.model;

import java.util.Map;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import static java.util.stream.Collectors.toList;
import static org.apache.commons.collections4.MapUtils.unmodifiableMap;


/**
 * An object for recording metrics gathered whilst analysing the words in text. Will be generated by implementations of WordCounter.
 * The object is thread safe so can be used by multiple threads to record occurrences of word lengths, via calls to {@link #registerWordOccurrenceOfLength(int)} ()}
 * A map is the principal field; used to store word length occurrences, and encapsulation is guaranteed by returning a read-only copy via its getter {@link #getMapFrequencyOfWordsGroupedByWordLength()} ()}
 * Several utility methods are provided to extract useful metrics from the map.
 */
public class WordCountMetrics {

    private final Map<Integer, Integer> mapFrequencyOfWordsGroupedByWordLength = new ConcurrentHashMap<>();

    /**
     * Record the occurrence of a word of the given length
     * @param wordLength
     */
    public void registerWordOccurrenceOfLength(int wordLength) {
        mapFrequencyOfWordsGroupedByWordLength.merge(wordLength, 1, (prev, one) -> prev+=1 );
    }

    /**
     * Have any metrics been gathered?
     * @return boolean true if data has been gathered
     */
    public boolean hasData() {
        return !mapFrequencyOfWordsGroupedByWordLength.isEmpty();
    }

    /**
     * Get the average length of all words analysed
     * @return Double
     */
    public Double getAverageWordLength() {
        return hasData() ? getTotalNumberOfCharactersInWords() / Double.valueOf(getTotalWordCount()) : 0;
    }

    /**
     * Get the total number of characters from all words analysed
     * @return int
     */
    public int getTotalNumberOfCharactersInWords() {
        return hasData() ? mapFrequencyOfWordsGroupedByWordLength.entrySet()
                .stream()
                .mapToInt(entry -> entry.getKey() * entry.getValue())
                .sum()
                : 0;
    }

    /**
     * Get the total number of words analysed
     * @return int
     */
    public int getTotalWordCount() {
        return hasData() ? mapFrequencyOfWordsGroupedByWordLength.values()
                .stream()
                .mapToInt(Integer::intValue)
                .sum()
                : 0;
    }

    /**
     * Get the highest frequency of occurrence of all word lengths
     * @return OptionalInt
     */
    public int getHighestFrequencyOfAWordLength() {
        return mapFrequencyOfWordsGroupedByWordLength.values()
                .stream()
                .mapToInt(Integer::intValue)
                .max()
                .orElse(0);
    }

    /**
     * Get the word lengths that have the given frequency of occurrence
     * @param frequency the frequency of occurrence to match
     * @return List<Integer> list containing the word lengths having the given frequency of occurrence
     */
    public List<Integer> getWordLengthsHavingFrequencyOf(int frequency) {
        return mapFrequencyOfWordsGroupedByWordLength.entrySet()
                .stream()
                .filter(next -> next.getValue() == frequency)
                .map(Map.Entry::getKey)
                .collect(toList());
    }

    public Map<Integer, Integer> getMapFrequencyOfWordsGroupedByWordLength() {
        // return an unmodifiable version for immutability of metrics
        return unmodifiableMap(mapFrequencyOfWordsGroupedByWordLength);
    }

}